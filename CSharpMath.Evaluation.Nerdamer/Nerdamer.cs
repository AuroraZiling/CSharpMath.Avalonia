using System;
using System.Collections.Generic;
using System.IO;
using Jurassic;
namespace CSharpMath.Evaluation {
  public class Nerdamer {
    class StreamScriptSource : ScriptSource, IDisposable {
      internal StreamScriptSource(Stream stream) => this.stream = stream;
      readonly Stream stream;
      public override string? Path => null;
      public void Dispose() => stream.Dispose();
      public override TextReader GetReader() => new StreamReader(stream);
    }
    /// <summary>You need to create new <see cref="Nerdamer"/> instances if you want to use on multiple threads</summary>
    public static Nerdamer SharedInstance { get; } = new Nerdamer();
    public Nerdamer() => _engine.Execute(new StreamScriptSource(typeof(Nerdamer).Assembly.GetManifestResourceStream("nerdamer.js")));
    readonly ScriptEngine _engine = new ScriptEngine();
    
    public Expression nerdamer(expression, subs, option, location)(String expression, Object subs, String|String[] option, int location) => _engine.Evaluate($"nerdamer({expression}, {subs}, {option}, {location})");
    public nerdamer nerdamer.setContant(name, value)(String name, Number|Expression|string value) => _engine.Evaluate($"nerdamer({name}, {value})");
    public nerdamer nerdamer.setVar(variable_name, value)(String name, Number|Expression|string value) => _engine.Evaluate($"nerdamer({name}, {value})");
    public nerdamer nerdamer.clearVars()() => _engine.Evaluate($"nerdamer()");
    public Object nerdamer.getVars(option)(String option) => _engine.Evaluate($"nerdamer({option})");
    public nerdamer nerdamer.expressions(x, y)(bool x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public nerdamer nerdamer.clear(x, y)(int | String x, bool fix_indeces) => _engine.Evaluate($"nerdamer({x}, {fix_indeces})");
    public nerdamer core nerdamer.getCore()() => _engine.Evaluate($"nerdamer()");
    public Expression nerdamer.getExpression(x)(int x) => _engine.Evaluate($"nerdamer({x})");
    public String[] | Object nerdamer.reserved(asArray)(bool asArray) => _engine.Evaluate($"nerdamer({asArray})");
    public void nerdamer.flush()() => _engine.Evaluate($"nerdamer()");
    public nerdamer nerdamer.setFunction(function_name, param_array, function_body)(String function_name, String[] param_array, String function_body) => _engine.Evaluate($"nerdamer({function_name}, {param_array}, {function_body})");
    public String nerdamer.convertToLaTeX(expression)(String expression) => _engine.Evaluate($"nerdamer({expression})");
    public String nerdamer.convertFromLaTeX(TeX)(String TeX) => _engine.Evaluate($"nerdamer({TeX})");
    public nerdamer nerdamer.version()() => _engine.Evaluate($"nerdamer()");
    public nerdamer nerdamer.tree()(Expression x) => _engine.Evaluate($"nerdamer({x})");
    public nerdamer nerdamer.htmlTree()(Expression x) => _engine.Evaluate($"nerdamer({x})");
    public nerdamer nerdamer.set(setting, value)(setting setting, VARIES value) => _engine.Evaluate($"nerdamer({setting}, {value})");
    public nerdamer nerdamer.register(o)(Object | Object[] o) => _engine.Evaluate($"nerdamer({o})");
    public bool nerdamer.validVarName(variable_name)(String variable_name) => _engine.Evaluate($"nerdamer({variable_name})");
    public Expression[] solveFor(variable)(String variable) => _engine.Evaluate($"nerdamer({variable})");
    public Symbol[] nerdamer("solve(expression, variable")(Expression expression, String variable) => _engine.Evaluate($"nerdamer({expression}, {variable})");
    public Symbol[] nerdamer.solveEquations(expression_or_array, variables)(Expression expressions_or_array, String variables) => _engine.Evaluate($"nerdamer({expressions_or_array}, {variables})");
    public String nerdamer.text(option, n)(String option, String n) => _engine.Evaluate($"nerdamer({option}, {n})");
    public Expression add(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression subtract(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression multiply(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression divide(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression pow(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Boolean eq(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Boolean gt(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Boolean gte(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Boolean lte(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Boolean lt(y)(String x, String y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public String nerdamer.toTeX() => _engine.Evaluate($"nerdamer()");
    public Expression evaluate()() => _engine.Evaluate($"nerdamer()");
    public Expression sub(value, for_value)(String value, String for_value) => _engine.Evaluate($"nerdamer({value}, {for_value})");
    public Function buildFunction(args_array)(String[] args_array) => _engine.Evaluate($"nerdamer({args_array})");
    public String[] variables()() => _engine.Evaluate($"nerdamer()");
    public Expression denominator()() => _engine.Evaluate($"nerdamer()");
    public Expression numerator()() => _engine.Evaluate($"nerdamer()");
    public Expression cosh(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression cos(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sinh(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sin(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression tan(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression tan(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sec(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sech(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression csc(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression csch(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression cot(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression coth(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression asinh(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression asin(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acosh(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acos(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression asec(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression asech(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acsc(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acsch(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acot(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression acoth(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression atan(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression atan(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression atan2(x, y)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression exp(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression min(... args)(expression args) => _engine.Evaluate($"nerdamer({args})");
    public Expression max(... args)(expression args) => _engine.Evaluate($"nerdamer({args})");
    public Expression floor(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression ceil(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression step(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression rect(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sinc(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression tri(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression factorial(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression dfactorial(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression factorial(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression arg(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression conjugate(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression imagpart(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression realpart(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression polarform(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression rectform(z)(expression z) => _engine.Evaluate($"nerdamer({z})");
    public Expression Ci(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression Chi(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression Si(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression Shi(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression Ei(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression continued_fraction(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression simplify(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression gamma_incomplete(n, x)(expression n, expression x) => _engine.Evaluate($"nerdamer({n}, {x})");
    public Expression fib(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression round(number)(expression number) => _engine.Evaluate($"nerdamer({number})");
    public Expression mod(x, y)(expression x, expression y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression sqrt(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression nthroot(x, y)(expression x, expression|integer y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression log(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression log10(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression expand(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Vector sort(x)(expression/polynomial x) => _engine.Evaluate($"nerdamer({x})");
    public Vector line(p1, p2)(vector p1, vector p2) => _engine.Evaluate($"nerdamer({p1}, {p2})");
    public Expression abs(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression erf(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sign(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression pfactor(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression parens(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression vector(x, y, ...)(expression x, expression y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression matrix(x, y, ...)(expression x, expression y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression imatrix(n)(expression n) => _engine.Evaluate($"nerdamer({n})");
    public Expression determinant(M)(Matrix M) => _engine.Evaluate($"nerdamer({M})");
    public Expression invert(M)(expression M) => _engine.Evaluate($"nerdamer({M})");
    public Expression vecget(v)(expression v) => _engine.Evaluate($"nerdamer({v})");
    public Vector vecset(v)(expression v) => _engine.Evaluate($"nerdamer({v})");
    public Expression matget(M, i, j)(expression M, expression i, expression j) => _engine.Evaluate($"nerdamer({M}, {i}, {j})");
    public Matrix matset(m, i, j)(expression M, expression i, expression j) => _engine.Evaluate($"nerdamer({M}, {i}, {j})");
    public Matrix matgetcol(M, i)(expression M, expression i) => _engine.Evaluate($"nerdamer({M}, {i})");
    public Matrix matgetrow(M, i)(expression M, expression i) => _engine.Evaluate($"nerdamer({M}, {i})");
    public Matrix matsetcol(M, i, col)(expression M, expression i, vector col) => _engine.Evaluate($"nerdamer({M}, {i}, {col})");
    public Matrix matsetrow(M, i, row)(expression M, expression i, vector row) => _engine.Evaluate($"nerdamer({M}, {i}, {row})");
    public Matrix size(M_V)(Matrix | Vector M_V) => _engine.Evaluate($"nerdamer({M_V})");
    public Matrix transpose(M)(expression M) => _engine.Evaluate($"nerdamer({M})");
    public Matrix cross(v1, v2)(Vector v1, Vector v2) => _engine.Evaluate($"nerdamer({v1}, {v2})");
    public Matrix dot(v1, v2)(Vector v1, Vector v2) => _engine.Evaluate($"nerdamer({v1}, {v2})");
    public Expression Set([x1, x2, x3, ...])(expression xn) => _engine.Evaluate($"nerdamer({xn})");
    public Expression intersection(set1, set2)(Set set1, Set set2) => _engine.Evaluate($"nerdamer({set1}, {set2})");
    public Expression intersects(set1, set2)(Set set1, Set set2) => _engine.Evaluate($"nerdamer({set1}, {set2})");
    public Expression union(set1, set2)(Set set1, Set set2) => _engine.Evaluate($"nerdamer({set1}, {set2})");
    public Expression difference(set1, set2)(Set set1, Set set2) => _engine.Evaluate($"nerdamer({set1}, {set2})");
    public Expression is_subset(set1, set2)(Set set1, Set set2) => _engine.Evaluate($"nerdamer({set1}, {set2})");
    public Expression/Integer deg(p)(Expression/polynomial p) => _engine.Evaluate($"nerdamer({p})");
    public Vector roots(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Vector coeffs(polynomial, x)(expression polynomial, expression x) => _engine.Evaluate($"nerdamer({polynomial}, {x})");
    public Vector sqcomp(polynomial, x)(expression polynomial, expression x) => _engine.Evaluate($"nerdamer({polynomial}, {x})");
    public Vector partfrac(expression, x)(expression expression, expression x) => _engine.Evaluate($"nerdamer({expression}, {x})");
    public Expression factor(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression divide(x, y)(expression x, expression y) => _engine.Evaluate($"nerdamer({x}, {y})");
    public Expression divide(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression gcd(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression lcm(x)(expression x) => _engine.Evaluate($"nerdamer({x})");
    public Expression sum(expression, index, lower, upper)(expression expression, expression index, expression lower, expression upper) => _engine.Evaluate($"nerdamer({expression}, {index}, {lower}, {upper})");
    public Expression product(expression, index, lower, upper)(expression expression, expression index, expression lower, expression upper) => _engine.Evaluate($"nerdamer({expression}, {index}, {lower}, {upper})");
    public Expression diff(expression_or_vector, x, n)(expression expression_or_vector, expression x, expression n) => _engine.Evaluate($"nerdamer({expression_or_vector}, {x}, {n})");
    public Expression integrate(expression_or_vector, dx)(expression expression_or_vector, expression dx) => _engine.Evaluate($"nerdamer({expression_or_vector}, {dx})");
    public Expression defint(expression_or_vector, from, to, dx)(expression expression_or_vector, expression dx, expression from, expression to) => _engine.Evaluate($"nerdamer({expression_or_vector}, {dx}, {from}, {to})");
    public Expression laplace(expression, t, s)(expression expression, variable t, variable s) => _engine.Evaluate($"nerdamer({expression}, {t}, {s})");
    public Expression ilt(expression, s, t)(expression expression, variable s, variable t) => _engine.Evaluate($"nerdamer({expression}, {s}, {t})");
    public Expression limit(expression, variable, limit)(expression expression, variable variable, limit limit) => _engine.Evaluate($"nerdamer({expression}, {variable}, {limit})");
    public Expression mean(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression mode(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression median(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression stdev(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression smpstdev(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression variance(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression smpvar(... args)(expression | expression[] args) => _engine.Evaluate($"nerdamer({args})");
    public Expression zscore(x, mean, stdev)(expression x, expression mean, expression stdev) => _engine.Evaluate($"nerdamer({x}, {mean}, {stdev})");
  }
}
